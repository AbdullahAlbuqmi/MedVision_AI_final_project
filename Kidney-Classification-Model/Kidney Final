{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# Kidney CT Classifier Model\n"],"metadata":{"id":"ZV5a6KuKCzpc"}},{"cell_type":"markdown","source":["# Table of Contents\n","\n","* [Introduction](#introduction)\n","* [Dataset Description](#dataset-description)\n","* [Import Libraries](#import-libraries)\n","* [Define Dataset Paths](#define-dataset-paths)\n","* [Prepare Image Generators](#prepare-image-generators)\n","* [Build the Model (DenseNet121)](#build-the-model)\n","* [Set Callbacks](#set-callbacks)\n","* [Train the Model](#train-the-model)\n","* [Evaluate the Model](#evaluate-the-model)\n","* [Save Model](#save-model)\n","* [Notes and Tips](#notes-and-tips)\n"],"metadata":{"id":"MqNEtOyEC8lJ"}},{"cell_type":"markdown","source":["## Introduction\n","<a name=\"introduction\"></a>\n","<a name=\"introduction\"></a>\n","This notebook implements a DenseNet121-based CNN to classify kidney CT images into 2 classes: Normal and Stone.\n","The dataset contains only clean grayscale CT images, carefully filtered to remove any other types (like CT abdomen slices).\n","Goal: Build an accurate classifier for kidney stone detection with minimal overfitting."],"metadata":{"id":"291ZlKsnC_pd"}},{"cell_type":"markdown","source":["## Dataset Description\n","<a name=\"dataset-description\"></a>\n","<a name=\"dataset-description\"></a>\n","\n","Source: Cleaned dataset prepared for training.\n","\n","Total Images: 4257  (approximate after cleaning)\n","\n","Classes:\n","\n","* Normal: 3340\n","\n","* Stone: 917\n","\n","Split:\n","\n","* Train: 80%\n","\n","* Validation: 10%\n","\n","* Test: 10%\n","\n","All images are grayscale and verified to contain only kidney CT scans relevant for stone detection."],"metadata":{"id":"Ew_vJOxYDPuR"}},{"cell_type":"markdown","source":["https://www.kaggle.com/datasets/srinivasbece/kindey-stone-dataset-splitted"],"metadata":{"id":"gfZ7xlG2CGNj"}},{"cell_type":"markdown","source":["## Import Libraries\n","<a name=\"import-libraries\"></a>"],"metadata":{"id":"ShoMGtQOFWWp"}},{"cell_type":"code","source":["import os\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.applications import DenseNet121\n","from tensorflow.keras import layers, models, Input, callbacks\n","from tensorflow.keras import mixed_precision\n","from sklearn.utils.class_weight import compute_class_weight\n","import numpy as np\n","\n","# Enable mixed precision for faster training\n","mixed_precision.set_global_policy('mixed_float16')\n","print(\"Mixed precision enabled:\", mixed_precision.global_policy())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k9bc3_xefFJl","executionInfo":{"status":"ok","timestamp":1761518026311,"user_tz":-180,"elapsed":92,"user":{"displayName":"Reem","userId":"13270926191561550801"}},"outputId":"3cce572f-7d56-4053-f3de-d1fc22ff9ade"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Mixed precision enabled: <DTypePolicy \"mixed_float16\">\n"]}]},{"cell_type":"markdown","source":["## Define Dataset Paths\n","<a name=\"define-dataset-paths\"></a>"],"metadata":{"id":"D_S5pDRTFei2"}},{"cell_type":"code","source":["# Dataset paths\n","dataset_path = \"/content/drive/MyDrive/Medical Assistant/Kindey_Stone_Dataset_clean\"\n","train_path = os.path.join(dataset_path, \"train\")\n","val_path   = os.path.join(dataset_path, \"val\")\n","test_path  = os.path.join(dataset_path, \"test\")\n"],"metadata":{"id":"-wHKI4ygfGEr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Prepare Image Generators\n","<a name=\"prepare-image-generators\"></a>"],"metadata":{"id":"6ObQMkrvFphR"}},{"cell_type":"code","source":["# Parameters\n","IMG_HEIGHT = 224\n","IMG_WIDTH = 224\n","NUM_CLASSES = 2  # Normal / Stone\n","BATCH_SIZE = 32\n","EPOCHS = 15\n","\n","# Image augmentation for training\n","train_datagen = ImageDataGenerator(\n","    rescale=1./255,\n","    rotation_range=20,\n","    width_shift_range=0.1,\n","    height_shift_range=0.1,\n","    zoom_range=0.1,\n","    horizontal_flip=True\n",")\n","\n","val_datagen = ImageDataGenerator(rescale=1./255)\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","# Load datasets\n","train_generator = train_datagen.flow_from_directory(\n","    train_path,\n","    target_size=(IMG_HEIGHT, IMG_WIDTH),\n","    color_mode='grayscale',\n","    class_mode='categorical',\n","    batch_size=BATCH_SIZE\n",")\n","\n","val_generator = val_datagen.flow_from_directory(\n","    val_path,\n","    target_size=(IMG_HEIGHT, IMG_WIDTH),\n","    color_mode='grayscale',\n","    class_mode='categorical',\n","    batch_size=BATCH_SIZE\n",")\n","\n","test_generator = test_datagen.flow_from_directory(\n","    test_path,\n","    target_size=(IMG_HEIGHT, IMG_WIDTH),\n","    color_mode='grayscale',\n","    class_mode='categorical',\n","    batch_size=BATCH_SIZE,\n","    shuffle=False\n",")\n","\n","# Compute class weights to handle imbalance\n","train_labels = train_generator.classes\n","class_weights = compute_class_weight(class_weight='balanced',\n","                                     classes=np.unique(train_labels),\n","                                     y=train_labels)\n","class_weights = dict(enumerate(class_weights))\n","print(\"Class weights:\", class_weights)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xHxIAxDMY6lm","executionInfo":{"status":"ok","timestamp":1761518036149,"user_tz":-180,"elapsed":7211,"user":{"displayName":"Reem","userId":"13270926191561550801"}},"outputId":"8dc89855-9b24-4232-87dc-dd020be4468d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 3005 images belonging to 2 classes.\n","Found 0 images belonging to 2 classes.\n","Found 0 images belonging to 2 classes.\n","Class weights: {0: np.float64(0.5644252441773103), 1: np.float64(4.380466472303207)}\n"]}]},{"cell_type":"markdown","source":["## Build the Model DenseNet121\n","<a name=\"build-the-model-DenseNet121\"></a>"],"metadata":{"id":"h7-CBNrPlzRN"}},{"cell_type":"code","source":["# Build DenseNet Model with Fine-Tuning\n","inputs = Input(shape=(IMG_HEIGHT, IMG_WIDTH, 1))  # grayscale\n","x = layers.Concatenate()([inputs, inputs, inputs])  # replicate channels\n","\n","# Base DenseNet\n","base_model = DenseNet121(include_top=False, weights='imagenet', input_shape=(IMG_HEIGHT, IMG_WIDTH, 3))\n","base_model.trainable = False  # Freeze first\n","\n","x = base_model(x)\n","x = layers.GlobalAveragePooling2D()(x)\n","x = layers.Dense(256, activation='relu')(x)\n","x = layers.Dropout(0.4)(x)\n","outputs = layers.Dense(NUM_CLASSES, activation='softmax')(x)\n","\n","model = models.Model(inputs=inputs, outputs=outputs)\n","\n","# Compile\n","model.compile(optimizer=tf.keras.optimizers.Adam(1e-4),\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","model.summary()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":483},"id":"idISdvdhfZT_","executionInfo":{"status":"ok","timestamp":1761518045089,"user_tz":-180,"elapsed":5003,"user":{"displayName":"Reem","userId":"13270926191561550801"}},"outputId":"be3f42c1-b831-4dfc-899e-20bb061405ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/densenet/densenet121_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m29084464/29084464\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"functional\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_layer         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m1\u001b[0m)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ concatenate         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ input_layer[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m… │\n","│ (\u001b[38;5;33mConcatenate\u001b[0m)       │ \u001b[38;5;34m3\u001b[0m)                │            │ input_layer[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m… │\n","│                     │                   │            │ input_layer[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ densenet121         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m,      │  \u001b[38;5;34m7,037,504\u001b[0m │ concatenate[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n","│ (\u001b[38;5;33mFunctional\u001b[0m)        │ \u001b[38;5;34m1024\u001b[0m)             │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ densenet121[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │    \u001b[38;5;34m262,400\u001b[0m │ global_average_p… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout (\u001b[38;5;33mDropout\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ dense[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │        \u001b[38;5;34m514\u001b[0m │ dropout[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_layer         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ concatenate         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)       │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │ input_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","│                     │                   │            │ input_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ densenet121         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>,      │  <span style=\"color: #00af00; text-decoration-color: #00af00\">7,037,504</span> │ concatenate[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)             │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ densenet121[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │    <span style=\"color: #00af00; text-decoration-color: #00af00\">262,400</span> │ global_average_p… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dense[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │ dropout[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m7,300,418\u001b[0m (27.85 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">7,300,418</span> (27.85 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m262,914\u001b[0m (1.00 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">262,914</span> (1.00 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m7,037,504\u001b[0m (26.85 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">7,037,504</span> (26.85 MB)\n","</pre>\n"]},"metadata":{}}]},{"cell_type":"markdown","source":["## Set Callbacks\n","<a name=\"set-callbacks\"></a>\n"],"metadata":{"id":"Bk7jsgInGf2p"}},{"cell_type":"code","source":["# Callbacks\n","checkpoint = callbacks.ModelCheckpoint(\n","    \"best_model.h5\",\n","    monitor=\"val_accuracy\",\n","    save_best_only=True,\n","    verbose=1\n",")\n","\n","early_stop = callbacks.EarlyStopping(\n","    monitor=\"val_accuracy\",\n","    patience=5,\n","    restore_best_weights=True,\n","    verbose=1\n",")"],"metadata":{"id":"egsyovczfbC_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train the Model\n","<a name=\"train-the-mode\"></a>\n"],"metadata":{"id":"1QWj5MkJGweJ"}},{"cell_type":"code","source":["# Stage 1: Train top layers only\n","history = model.fit(\n","    train_generator,\n","    validation_data=val_generator,\n","    epochs=EPOCHS,\n","    steps_per_epoch=len(train_generator),\n","    validation_steps=len(val_generator),\n","    class_weight=class_weights,\n","    callbacks=[checkpoint, early_stop]\n",")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gCZT5olpY9ZC","executionInfo":{"status":"ok","timestamp":1761329535000,"user_tz":-180,"elapsed":489503,"user":{"displayName":"Reem","userId":"05412764168701039597"}},"outputId":"64050e58-ddea-4c67-a83d-792f615540f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 433ms/step - accuracy: 0.6252 - loss: 0.9982\n","Epoch 1: val_accuracy improved from -inf to 0.73412, saving model to best_model.h5\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m100s\u001b[0m 682ms/step - accuracy: 0.6256 - loss: 0.9958 - val_accuracy: 0.7341 - val_loss: 0.4958\n","Epoch 2/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 312ms/step - accuracy: 0.7734 - loss: 0.4580\n","Epoch 2: val_accuracy improved from 0.73412 to 0.83059, saving model to best_model.h5\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 342ms/step - accuracy: 0.7737 - loss: 0.4576 - val_accuracy: 0.8306 - val_loss: 0.3590\n","Epoch 3/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 323ms/step - accuracy: 0.8399 - loss: 0.3317\n","Epoch 3: val_accuracy improved from 0.83059 to 0.87529, saving model to best_model.h5\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 354ms/step - accuracy: 0.8400 - loss: 0.3316 - val_accuracy: 0.8753 - val_loss: 0.3052\n","Epoch 4/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335ms/step - accuracy: 0.8818 - loss: 0.2692\n","Epoch 4: val_accuracy did not improve from 0.87529\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 358ms/step - accuracy: 0.8819 - loss: 0.2692 - val_accuracy: 0.8353 - val_loss: 0.3337\n","Epoch 5/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 317ms/step - accuracy: 0.8976 - loss: 0.2426\n","Epoch 5: val_accuracy did not improve from 0.87529\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 344ms/step - accuracy: 0.8976 - loss: 0.2425 - val_accuracy: 0.8682 - val_loss: 0.2931\n","Epoch 6/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 313ms/step - accuracy: 0.9090 - loss: 0.2123\n","Epoch 6: val_accuracy improved from 0.87529 to 0.92235, saving model to best_model.h5\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 345ms/step - accuracy: 0.9090 - loss: 0.2124 - val_accuracy: 0.9224 - val_loss: 0.2109\n","Epoch 7/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 315ms/step - accuracy: 0.9173 - loss: 0.1888\n","Epoch 7: val_accuracy did not improve from 0.92235\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 338ms/step - accuracy: 0.9174 - loss: 0.1888 - val_accuracy: 0.8847 - val_loss: 0.2611\n","Epoch 8/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 324ms/step - accuracy: 0.9228 - loss: 0.1828\n","Epoch 8: val_accuracy did not improve from 0.92235\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 346ms/step - accuracy: 0.9228 - loss: 0.1827 - val_accuracy: 0.9035 - val_loss: 0.2271\n","Epoch 9/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 312ms/step - accuracy: 0.9338 - loss: 0.1661\n","Epoch 9: val_accuracy did not improve from 0.92235\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 340ms/step - accuracy: 0.9338 - loss: 0.1661 - val_accuracy: 0.8471 - val_loss: 0.3209\n","Epoch 10/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 313ms/step - accuracy: 0.9433 - loss: 0.1529\n","Epoch 10: val_accuracy did not improve from 0.92235\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 337ms/step - accuracy: 0.9433 - loss: 0.1528 - val_accuracy: 0.9012 - val_loss: 0.2181\n","Epoch 11/15\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335ms/step - accuracy: 0.9491 - loss: 0.1371\n","Epoch 11: val_accuracy did not improve from 0.92235\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 358ms/step - accuracy: 0.9491 - loss: 0.1371 - val_accuracy: 0.9176 - val_loss: 0.2025\n","Epoch 11: early stopping\n","Restoring model weights from the end of the best epoch: 6.\n"]}]},{"cell_type":"code","source":["# Stage 2: Fine-tune last 50 layers of DenseNet\n","base_model.trainable = True\n","# Freeze first layers, fine-tune last 50 layers\n","for layer in base_model.layers[:-50]:\n","    layer.trainable = False\n","\n","model.compile(optimizer=tf.keras.optimizers.Adam(1e-5),  # lower LR\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","history_finetune = model.fit(\n","    train_generator,\n","    validation_data=val_generator,\n","    epochs=10,\n","    steps_per_epoch=len(train_generator),\n","    validation_steps=len(val_generator),\n","    class_weight=class_weights,\n","    callbacks=[checkpoint, early_stop]\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-21JFvO1Y9hp","executionInfo":{"status":"ok","timestamp":1761330221974,"user_tz":-180,"elapsed":501695,"user":{"displayName":"Reem","userId":"05412764168701039597"}},"outputId":"15dad309-7234-4c9c-ab35-86aa3e4a9d66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 575ms/step - accuracy: 0.8967 - loss: 0.2244\n","Epoch 1: val_accuracy improved from 0.92235 to 0.95294, saving model to best_model.h5\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m134s\u001b[0m 819ms/step - accuracy: 0.8968 - loss: 0.2243 - val_accuracy: 0.9529 - val_loss: 0.1416\n","Epoch 2/10\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - accuracy: 0.9150 - loss: 0.2018\n","Epoch 2: val_accuracy improved from 0.95294 to 0.96235, saving model to best_model.h5\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m67s\u001b[0m 355ms/step - accuracy: 0.9151 - loss: 0.2016 - val_accuracy: 0.9624 - val_loss: 0.1233\n","Epoch 3/10\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 315ms/step - accuracy: 0.9499 - loss: 0.1409\n","Epoch 3: val_accuracy did not improve from 0.96235\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 339ms/step - accuracy: 0.9498 - loss: 0.1409 - val_accuracy: 0.9553 - val_loss: 0.1226\n","Epoch 4/10\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9506 - loss: 0.1245\n","Epoch 4: val_accuracy improved from 0.96235 to 0.97176, saving model to best_model.h5\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 352ms/step - accuracy: 0.9506 - loss: 0.1245 - val_accuracy: 0.9718 - val_loss: 0.0947\n","Epoch 5/10\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 333ms/step - accuracy: 0.9705 - loss: 0.1031\n","Epoch 5: val_accuracy improved from 0.97176 to 0.97647, saving model to best_model.h5\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 364ms/step - accuracy: 0.9704 - loss: 0.1030 - val_accuracy: 0.9765 - val_loss: 0.0807\n","Epoch 6/10\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 323ms/step - accuracy: 0.9658 - loss: 0.0962\n","Epoch 6: val_accuracy improved from 0.97647 to 0.99294, saving model to best_model.h5\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 355ms/step - accuracy: 0.9659 - loss: 0.0962 - val_accuracy: 0.9929 - val_loss: 0.0589\n","Epoch 7/10\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 312ms/step - accuracy: 0.9717 - loss: 0.0742\n","Epoch 7: val_accuracy did not improve from 0.99294\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 341ms/step - accuracy: 0.9717 - loss: 0.0742 - val_accuracy: 0.9859 - val_loss: 0.0704\n","Epoch 8/10\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 314ms/step - accuracy: 0.9778 - loss: 0.0702\n","Epoch 8: val_accuracy did not improve from 0.99294\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 337ms/step - accuracy: 0.9779 - loss: 0.0702 - val_accuracy: 0.9882 - val_loss: 0.0546\n","Epoch 9/10\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - accuracy: 0.9797 - loss: 0.0643\n","Epoch 9: val_accuracy did not improve from 0.99294\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 345ms/step - accuracy: 0.9797 - loss: 0.0643 - val_accuracy: 0.9929 - val_loss: 0.0438\n","Epoch 10/10\n","\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 325ms/step - accuracy: 0.9835 - loss: 0.0502\n","Epoch 10: val_accuracy improved from 0.99294 to 0.99529, saving model to best_model.h5\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 358ms/step - accuracy: 0.9835 - loss: 0.0502 - val_accuracy: 0.9953 - val_loss: 0.0376\n","Restoring model weights from the end of the best epoch: 10.\n"]}]},{"cell_type":"markdown","source":["## Evaluate the Model\n","<a name=\"evaluate-the-model\"></a>\n"],"metadata":{"id":"Qx3pYrAwdCwa"}},{"cell_type":"code","source":["# Evaluate Model\n","test_loss, test_acc = model.evaluate(test_generator)\n","print(f\"Test Accuracy: {test_acc*100:.2f}%\")\n","print(f\"Test Loss: {test_loss:.4f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uXiAHkd-9Gyn","executionInfo":{"status":"ok","timestamp":1761330435672,"user_tz":-180,"elapsed":177547,"user":{"displayName":"Reem","userId":"05412764168701039597"}},"outputId":"6f17a71d-1027-4e14-e411-cc511eb35c94"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m150s\u001b[0m 12s/step - accuracy: 0.9826 - loss: 0.0609\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["Test Accuracy: 98.36%\n","Test Loss: 0.0510\n","✅ Model saved at: /content/drive/MyDrive/Capstone AI Medical Assistant /Kidney_CT_Classifier_clean_dense.h5\n"]}]},{"cell_type":"markdown","source":["## Save Model\n","<a name=\"save-model\"></a>"],"metadata":{"id":"kIinLNeAAQsX"}},{"cell_type":"code","source":["# Save Model\n","model_save_path = \"/content/drive/MyDrive/Capstone AI Medical Assistant /Kidney_CT_Classifier_clean_dense.h5\"\n","model.save(model_save_path)\n","print(f\"✅ Model saved at: {model_save_path}\")"],"metadata":{"id":"DypNf-VggoXX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Notes and Tips\n","<a name=\"notes-and-tips\"></a>\n","<a name=\"notes-and-tips\"></a>\n","\n","* Dataset cleaned to include only Normal and Stone kidney CT images.\n","\n","* Data Augmentation is used to reduce overfitting.\n","\n","* Mixed precision speeds up training.\n","\n","* Stage 2 Fine-tuning significantly improves validation accuracy.\n","\n","* Use class weights to handle imbalance between Normal and Stone images.\n","\n","* Monitor val_accuracy and val_loss to avoid overfitting.\n","\n","* For future improvements, consider experimenting with EfficientNet or ResNet backbones."],"metadata":{"id":"goBplfDwHN27"}}]}